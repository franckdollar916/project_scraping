import psycopg2

def connect_db():
    """ Connexion √† la base PostgreSQL """
    try:
        conn = psycopg2.connect(
            dbname="books_db",
            user="postgres",
            password="franckdollar91",
            host="database",  # Utiliser "database" pour Docker
            port="5432"
        )
        return conn
    except Exception as e:
        print("‚ùå Erreur de connexion :", e)
        return None

def execute_schema():
    """ Ex√©cute le fichier schema.sql pour cr√©er la base de donn√©es et les tables """
    try:
        # Connexion √† PostgreSQL sans sp√©cifier de base (n√©cessaire pour cr√©er la DB)
        conn = psycopg2.connect(
            dbname="postgres",
            user="postgres",
            password="franckdollar91",
            host="database",  # Nom du service Docker (remplacer par "localhost" si hors Docker)
            port="5432"
        )
        conn.autocommit = True
        cur = conn.cursor()

        # Lire et ex√©cuter le fichier schema.sql
        with open("/app/schema.sql", "r") as file:  # Docker monte le fichier ici
            sql_script = file.read()
        cur.execute(sql_script)

        cur.close()
        conn.close()
        print("‚úÖ Base de donn√©es et table cr√©√©es avec succ√®s !")

    except Exception as e:
        print("‚ùå Erreur lors de l'ex√©cution du sch√©ma SQL :", e)

def insert_books(books):
    """ Ins√®re les livres scrapp√©s dans PostgreSQL """
    conn = connect_db()
    if not conn:
        return
    
    try:
        cur = conn.cursor()
        insert_query = """
        INSERT INTO books (title, price, availability) VALUES (%s, %s, %s)
        """

        # V√©rification : `books` doit √™tre une liste de dictionnaires
        if isinstance(books, dict):
            books = [books]  

        if not isinstance(books, list):  
            print("‚ùå Format invalide : `books` doit √™tre une liste de dictionnaires")
            return

        # üìå V√©rifier que chaque livre a bien les trois champs n√©cessaires (remplacer les champs manquants par "")
        values = []
        for book in books:
            title = book.get("title", "").strip()  # Mettre une cha√Æne vide si absent
            price = book.get("price", "").strip()
            availability = book.get("availability", "").strip()

            values.append((title, price, availability))

        cur.executemany(insert_query, values)  # Ex√©cuter l'insertion
        conn.commit()

        print(f"‚úÖ {len(books)} livres ins√©r√©s dans la base de donn√©es !")
    
    except Exception as e:
        print("‚ùå Erreur d'insertion :", e)
        conn.rollback()
    
    finally:
        cur.close()
        conn.close()

def afficher_books():
    """ Affiche les 10 premiers livres de la base de donn√©es """
    conn = connect_db()
    if not conn:
        return
    
    try:
        cur = conn.cursor()
        cur.execute("SELECT * FROM books LIMIT 10;")
        rows = cur.fetchall()

        print("\nüìö Liste des 10 premiers livres :")
        for row in rows:
            print(row)

    except Exception as e:
        print("‚ùå Erreur d'affichage :", e)
    
    finally:
        cur.close()
        conn.close()

def afficher_structure_books():
    """ Affiche la structure de la table books """
    conn = connect_db()
    if not conn:
        return
    
    try:
        cur = conn.cursor()
        cur.execute("SELECT column_name, data_type FROM information_schema.columns WHERE table_name = 'books';")
        rows = cur.fetchall()

        print("\nüìå Structure de la table 'books' :")
        for row in rows:
            print(f"- {row[0]} ({row[1]})")

    except Exception as e:
        print("‚ùå Erreur d'affichage de la structure :", e)
    
    finally:
        cur.close()
        conn.close()

# Ex√©cuter la cr√©ation de la base et de la table automatiquement
if __name__ == "__main__":
    execute_schema()  # Ex√©cute le fichier schema.sql
    afficher_structure_books()  # V√©rifie la structure de la table
    afficher_books()  # V√©rifie les donn√©es stock√©es
